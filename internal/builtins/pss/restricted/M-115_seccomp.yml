# Copyright 2023 Undistro Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
# https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/pod-security-admission/policy/check_seccompProfile_restricted.go
# https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/pod-security-admission/policy/check_seccompProfile_restricted_test.go
id: M-115
slug: seccomp-restricted
severity: Low
message: "Not allowed seccomp profile"
match:
  resources:
    - group: ""
      version: v1
      resource: pods
    - group: apps
      version: v1
      resource: deployments
    - group: apps
      version: v1
      resource: daemonsets
    - group: apps
      version: v1
      resource: statefulsets
    - group: apps
      version: v1
      resource: replicasets
    - group: batch
      version: v1
      resource: cronjobs
    - group: batch
      version: v1
      resource: jobs
variables:
  # pod-level seccompProfile is explicitly different to Unconfined
  - name: podSeccompSet
    expression: podSpec.?securityContext.?seccompProfile.?type.orValue("Unconfined") != "Unconfined"

  # pod-level seccompProfile is explicitly Unconfined
  - name: podSeccompUnconfined
    expression: podSpec.?securityContext.?seccompProfile.?type.orValue("") == "Unconfined"

  # containers that explicitly set seccompProfile.type to Unconfined
  - name: explicitlyBadContainers
    expression: allContainers.filter(c, c.?securityContext.?seccompProfile.?type.orValue("") == "Unconfined")

  # containers that didn't set seccompProfile and aren't caught by a pod-level seccompProfile
  - name: implicitlyBadContainers
    expression: >
      allContainers.filter(c, 
        !variables.podSeccompSet && c.?securityContext.?seccompProfile.orValue(null) == null
      )

  - name: isWindows
    expression: podSpec.?os.?name.orValue("") == "windows"
validations:
  - expression: >
      variables.isWindows || 
      ( 
        !variables.podSeccompUnconfined && 
        variables.explicitlyBadContainers.size() == 0 && 
        variables.implicitlyBadContainers.size() == 0
      )
