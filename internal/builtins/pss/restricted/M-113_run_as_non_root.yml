# Copyright 2023 Undistro Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
# https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/pod-security-admission/policy/check_runAsNonRoot.go
# https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/pod-security-admission/policy/check_runAsNonRoot_test.go
id: M-113
slug: run-as-non-root
severity: Medium
message: "Container could be running as root user"
match:
  resources:
    - group: ""
      version: v1
      resource: pods
    - group: apps
      version: v1
      resource: deployments
    - group: apps
      version: v1
      resource: daemonsets
    - group: apps
      version: v1
      resource: statefulsets
    - group: apps
      version: v1
      resource: replicasets
    - group: batch
      version: v1
      resource: cronjobs
    - group: batch
      version: v1
      resource: jobs
variables:
  - name: podRunAsNonRoot
    expression: podSpec.?securityContext.?runAsNonRoot.orValue(false)

  # containers that explicitly set runAsNonRoot=false
  - name: explicitlyBadContainers
    expression: >
      allContainers.filter(c,
          has(c.securityContext) && has(c.securityContext.runAsNonRoot) && c.securityContext.runAsNonRoot == false
      )

  # containers that didn't set runAsNonRoot and aren't caught by a pod-level runAsNonRoot=true
  - name: implicitlyBadContainers
    expression: >
      allContainers.filter(c,
          !variables.podRunAsNonRoot && (!has(c.securityContext) || !has(c.securityContext.runAsNonRoot)) 
      )

validations:
  - expression: variables.explicitlyBadContainers.size() == 0 && variables.implicitlyBadContainers.size() == 0
